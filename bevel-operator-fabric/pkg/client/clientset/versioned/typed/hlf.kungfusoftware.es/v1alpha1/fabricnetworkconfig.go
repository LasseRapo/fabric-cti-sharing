/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/kfsoftware/hlf-operator/pkg/apis/hlf.kungfusoftware.es/v1alpha1"
	hlfkungfusoftwareesv1alpha1 "github.com/kfsoftware/hlf-operator/pkg/client/applyconfiguration/hlf.kungfusoftware.es/v1alpha1"
	scheme "github.com/kfsoftware/hlf-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// FabricNetworkConfigsGetter has a method to return a FabricNetworkConfigInterface.
// A group's client should implement this interface.
type FabricNetworkConfigsGetter interface {
	FabricNetworkConfigs(namespace string) FabricNetworkConfigInterface
}

// FabricNetworkConfigInterface has methods to work with FabricNetworkConfig resources.
type FabricNetworkConfigInterface interface {
	Create(ctx context.Context, fabricNetworkConfig *v1alpha1.FabricNetworkConfig, opts v1.CreateOptions) (*v1alpha1.FabricNetworkConfig, error)
	Update(ctx context.Context, fabricNetworkConfig *v1alpha1.FabricNetworkConfig, opts v1.UpdateOptions) (*v1alpha1.FabricNetworkConfig, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, fabricNetworkConfig *v1alpha1.FabricNetworkConfig, opts v1.UpdateOptions) (*v1alpha1.FabricNetworkConfig, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.FabricNetworkConfig, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.FabricNetworkConfigList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.FabricNetworkConfig, err error)
	Apply(ctx context.Context, fabricNetworkConfig *hlfkungfusoftwareesv1alpha1.FabricNetworkConfigApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.FabricNetworkConfig, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, fabricNetworkConfig *hlfkungfusoftwareesv1alpha1.FabricNetworkConfigApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.FabricNetworkConfig, err error)
	FabricNetworkConfigExpansion
}

// fabricNetworkConfigs implements FabricNetworkConfigInterface
type fabricNetworkConfigs struct {
	*gentype.ClientWithListAndApply[*v1alpha1.FabricNetworkConfig, *v1alpha1.FabricNetworkConfigList, *hlfkungfusoftwareesv1alpha1.FabricNetworkConfigApplyConfiguration]
}

// newFabricNetworkConfigs returns a FabricNetworkConfigs
func newFabricNetworkConfigs(c *HlfV1alpha1Client, namespace string) *fabricNetworkConfigs {
	return &fabricNetworkConfigs{
		gentype.NewClientWithListAndApply[*v1alpha1.FabricNetworkConfig, *v1alpha1.FabricNetworkConfigList, *hlfkungfusoftwareesv1alpha1.FabricNetworkConfigApplyConfiguration](
			"fabricnetworkconfigs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.FabricNetworkConfig { return &v1alpha1.FabricNetworkConfig{} },
			func() *v1alpha1.FabricNetworkConfigList { return &v1alpha1.FabricNetworkConfigList{} }),
	}
}
