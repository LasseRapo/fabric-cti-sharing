/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/kfsoftware/hlf-operator/pkg/apis/hlf.kungfusoftware.es/v1alpha1"
	hlfkungfusoftwareesv1alpha1 "github.com/kfsoftware/hlf-operator/pkg/client/applyconfiguration/hlf.kungfusoftware.es/v1alpha1"
	scheme "github.com/kfsoftware/hlf-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// FabricPeersGetter has a method to return a FabricPeerInterface.
// A group's client should implement this interface.
type FabricPeersGetter interface {
	FabricPeers(namespace string) FabricPeerInterface
}

// FabricPeerInterface has methods to work with FabricPeer resources.
type FabricPeerInterface interface {
	Create(ctx context.Context, fabricPeer *v1alpha1.FabricPeer, opts v1.CreateOptions) (*v1alpha1.FabricPeer, error)
	Update(ctx context.Context, fabricPeer *v1alpha1.FabricPeer, opts v1.UpdateOptions) (*v1alpha1.FabricPeer, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, fabricPeer *v1alpha1.FabricPeer, opts v1.UpdateOptions) (*v1alpha1.FabricPeer, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.FabricPeer, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.FabricPeerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.FabricPeer, err error)
	Apply(ctx context.Context, fabricPeer *hlfkungfusoftwareesv1alpha1.FabricPeerApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.FabricPeer, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, fabricPeer *hlfkungfusoftwareesv1alpha1.FabricPeerApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.FabricPeer, err error)
	FabricPeerExpansion
}

// fabricPeers implements FabricPeerInterface
type fabricPeers struct {
	*gentype.ClientWithListAndApply[*v1alpha1.FabricPeer, *v1alpha1.FabricPeerList, *hlfkungfusoftwareesv1alpha1.FabricPeerApplyConfiguration]
}

// newFabricPeers returns a FabricPeers
func newFabricPeers(c *HlfV1alpha1Client, namespace string) *fabricPeers {
	return &fabricPeers{
		gentype.NewClientWithListAndApply[*v1alpha1.FabricPeer, *v1alpha1.FabricPeerList, *hlfkungfusoftwareesv1alpha1.FabricPeerApplyConfiguration](
			"fabricpeers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.FabricPeer { return &v1alpha1.FabricPeer{} },
			func() *v1alpha1.FabricPeerList { return &v1alpha1.FabricPeerList{} }),
	}
}
