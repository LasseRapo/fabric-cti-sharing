/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// FabricChaincodeInstallSpecApplyConfiguration represents a declarative configuration of the FabricChaincodeInstallSpec type for use
// with apply.
type FabricChaincodeInstallSpecApplyConfiguration struct {
	Peers            []FabricPeerInternalRefApplyConfiguration `json:"peers,omitempty"`
	ExternalPeers    []FabricPeerExternalRefApplyConfiguration `json:"externalPeers,omitempty"`
	MSPID            *string                                   `json:"mspID,omitempty"`
	HLFIdentity      *HLFIdentityApplyConfiguration            `json:"hlfIdentity,omitempty"`
	ChaincodePackage *ChaincodePackageApplyConfiguration       `json:"chaincodePackage,omitempty"`
}

// FabricChaincodeInstallSpecApplyConfiguration constructs a declarative configuration of the FabricChaincodeInstallSpec type for use with
// apply.
func FabricChaincodeInstallSpec() *FabricChaincodeInstallSpecApplyConfiguration {
	return &FabricChaincodeInstallSpecApplyConfiguration{}
}

// WithPeers adds the given value to the Peers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Peers field.
func (b *FabricChaincodeInstallSpecApplyConfiguration) WithPeers(values ...*FabricPeerInternalRefApplyConfiguration) *FabricChaincodeInstallSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPeers")
		}
		b.Peers = append(b.Peers, *values[i])
	}
	return b
}

// WithExternalPeers adds the given value to the ExternalPeers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalPeers field.
func (b *FabricChaincodeInstallSpecApplyConfiguration) WithExternalPeers(values ...*FabricPeerExternalRefApplyConfiguration) *FabricChaincodeInstallSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalPeers")
		}
		b.ExternalPeers = append(b.ExternalPeers, *values[i])
	}
	return b
}

// WithMSPID sets the MSPID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MSPID field is set to the value of the last call.
func (b *FabricChaincodeInstallSpecApplyConfiguration) WithMSPID(value string) *FabricChaincodeInstallSpecApplyConfiguration {
	b.MSPID = &value
	return b
}

// WithHLFIdentity sets the HLFIdentity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HLFIdentity field is set to the value of the last call.
func (b *FabricChaincodeInstallSpecApplyConfiguration) WithHLFIdentity(value *HLFIdentityApplyConfiguration) *FabricChaincodeInstallSpecApplyConfiguration {
	b.HLFIdentity = value
	return b
}

// WithChaincodePackage sets the ChaincodePackage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChaincodePackage field is set to the value of the last call.
func (b *FabricChaincodeInstallSpecApplyConfiguration) WithChaincodePackage(value *ChaincodePackageApplyConfiguration) *FabricChaincodeInstallSpecApplyConfiguration {
	b.ChaincodePackage = value
	return b
}
