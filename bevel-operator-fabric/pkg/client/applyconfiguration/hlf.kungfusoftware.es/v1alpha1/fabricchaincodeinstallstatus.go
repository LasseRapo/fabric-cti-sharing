/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	hlfkungfusoftwareesv1alpha1 "github.com/kfsoftware/hlf-operator/pkg/apis/hlf.kungfusoftware.es/v1alpha1"
	status "github.com/kfsoftware/hlf-operator/pkg/status"
)

// FabricChaincodeInstallStatusApplyConfiguration represents a declarative configuration of the FabricChaincodeInstallStatus type for use
// with apply.
type FabricChaincodeInstallStatusApplyConfiguration struct {
	Conditions     *status.Conditions                            `json:"conditions,omitempty"`
	Message        *string                                       `json:"message,omitempty"`
	PackageID      *string                                       `json:"packageID,omitempty"`
	FailedPeers    []FailedPeerApplyConfiguration                `json:"failedPeers,omitempty"`
	InstalledPeers []InstalledPeerApplyConfiguration             `json:"installedPeers,omitempty"`
	Status         *hlfkungfusoftwareesv1alpha1.DeploymentStatus `json:"status,omitempty"`
}

// FabricChaincodeInstallStatusApplyConfiguration constructs a declarative configuration of the FabricChaincodeInstallStatus type for use with
// apply.
func FabricChaincodeInstallStatus() *FabricChaincodeInstallStatusApplyConfiguration {
	return &FabricChaincodeInstallStatusApplyConfiguration{}
}

// WithConditions sets the Conditions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Conditions field is set to the value of the last call.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithConditions(value status.Conditions) *FabricChaincodeInstallStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithMessage(value string) *FabricChaincodeInstallStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithPackageID sets the PackageID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PackageID field is set to the value of the last call.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithPackageID(value string) *FabricChaincodeInstallStatusApplyConfiguration {
	b.PackageID = &value
	return b
}

// WithFailedPeers adds the given value to the FailedPeers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FailedPeers field.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithFailedPeers(values ...*FailedPeerApplyConfiguration) *FabricChaincodeInstallStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFailedPeers")
		}
		b.FailedPeers = append(b.FailedPeers, *values[i])
	}
	return b
}

// WithInstalledPeers adds the given value to the InstalledPeers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InstalledPeers field.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithInstalledPeers(values ...*InstalledPeerApplyConfiguration) *FabricChaincodeInstallStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstalledPeers")
		}
		b.InstalledPeers = append(b.InstalledPeers, *values[i])
	}
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *FabricChaincodeInstallStatusApplyConfiguration) WithStatus(value hlfkungfusoftwareesv1alpha1.DeploymentStatus) *FabricChaincodeInstallStatusApplyConfiguration {
	b.Status = &value
	return b
}
