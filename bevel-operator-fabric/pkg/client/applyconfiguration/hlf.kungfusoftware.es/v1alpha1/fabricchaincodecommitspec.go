/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// FabricChaincodeCommitSpecApplyConfiguration represents a declarative configuration of the FabricChaincodeCommitSpec type for use
// with apply.
type FabricChaincodeCommitSpecApplyConfiguration struct {
	ChaincodeName          *string                                      `json:"chaincodeName,omitempty"`
	ChannelName            *string                                      `json:"channelName,omitempty"`
	Version                *string                                      `json:"version,omitempty"`
	Sequence               *int64                                       `json:"sequence,omitempty"`
	EndorsementPolicy      *string                                      `json:"endorsementPolicy,omitempty"`
	PrivateDataCollections []PrivateDataCollectionApplyConfiguration    `json:"pdc,omitempty"`
	InitRequired           *bool                                        `json:"initRequired,omitempty"`
	HLFIdentity            *HLFIdentityApplyConfiguration               `json:"hlfIdentity,omitempty"`
	MSPID                  *string                                      `json:"mspID,omitempty"`
	Peers                  []FabricPeerInternalRefApplyConfiguration    `json:"peers,omitempty"`
	ExternalPeers          []FabricPeerExternalRefApplyConfiguration    `json:"externalPeers,omitempty"`
	Orderers               []FabricOrdererInternalRefApplyConfiguration `json:"orderers,omitempty"`
	ExternalOrderers       []FabricOrdererExternalRefApplyConfiguration `json:"externalOrderers,omitempty"`
}

// FabricChaincodeCommitSpecApplyConfiguration constructs a declarative configuration of the FabricChaincodeCommitSpec type for use with
// apply.
func FabricChaincodeCommitSpec() *FabricChaincodeCommitSpecApplyConfiguration {
	return &FabricChaincodeCommitSpecApplyConfiguration{}
}

// WithChaincodeName sets the ChaincodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChaincodeName field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithChaincodeName(value string) *FabricChaincodeCommitSpecApplyConfiguration {
	b.ChaincodeName = &value
	return b
}

// WithChannelName sets the ChannelName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChannelName field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithChannelName(value string) *FabricChaincodeCommitSpecApplyConfiguration {
	b.ChannelName = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithVersion(value string) *FabricChaincodeCommitSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithSequence sets the Sequence field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sequence field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithSequence(value int64) *FabricChaincodeCommitSpecApplyConfiguration {
	b.Sequence = &value
	return b
}

// WithEndorsementPolicy sets the EndorsementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndorsementPolicy field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithEndorsementPolicy(value string) *FabricChaincodeCommitSpecApplyConfiguration {
	b.EndorsementPolicy = &value
	return b
}

// WithPrivateDataCollections adds the given value to the PrivateDataCollections field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PrivateDataCollections field.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithPrivateDataCollections(values ...*PrivateDataCollectionApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPrivateDataCollections")
		}
		b.PrivateDataCollections = append(b.PrivateDataCollections, *values[i])
	}
	return b
}

// WithInitRequired sets the InitRequired field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitRequired field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithInitRequired(value bool) *FabricChaincodeCommitSpecApplyConfiguration {
	b.InitRequired = &value
	return b
}

// WithHLFIdentity sets the HLFIdentity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HLFIdentity field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithHLFIdentity(value *HLFIdentityApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	b.HLFIdentity = value
	return b
}

// WithMSPID sets the MSPID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MSPID field is set to the value of the last call.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithMSPID(value string) *FabricChaincodeCommitSpecApplyConfiguration {
	b.MSPID = &value
	return b
}

// WithPeers adds the given value to the Peers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Peers field.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithPeers(values ...*FabricPeerInternalRefApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPeers")
		}
		b.Peers = append(b.Peers, *values[i])
	}
	return b
}

// WithExternalPeers adds the given value to the ExternalPeers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalPeers field.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithExternalPeers(values ...*FabricPeerExternalRefApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalPeers")
		}
		b.ExternalPeers = append(b.ExternalPeers, *values[i])
	}
	return b
}

// WithOrderers adds the given value to the Orderers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Orderers field.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithOrderers(values ...*FabricOrdererInternalRefApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOrderers")
		}
		b.Orderers = append(b.Orderers, *values[i])
	}
	return b
}

// WithExternalOrderers adds the given value to the ExternalOrderers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalOrderers field.
func (b *FabricChaincodeCommitSpecApplyConfiguration) WithExternalOrderers(values ...*FabricOrdererExternalRefApplyConfiguration) *FabricChaincodeCommitSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalOrderers")
		}
		b.ExternalOrderers = append(b.ExternalOrderers, *values[i])
	}
	return b
}
