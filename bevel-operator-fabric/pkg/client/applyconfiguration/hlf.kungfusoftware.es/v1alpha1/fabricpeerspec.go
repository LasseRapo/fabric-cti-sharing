/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	hlfkungfusoftwareesv1alpha1 "github.com/kfsoftware/hlf-operator/pkg/apis/hlf.kungfusoftware.es/v1alpha1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// FabricPeerSpecApplyConfiguration represents a declarative configuration of the FabricPeerSpec type for use
// with apply.
type FabricPeerSpecApplyConfiguration struct {
	PodAnnotations                 map[string]string                            `json:"podAnnotations,omitempty"`
	PodLabels                      map[string]string                            `json:"podLabels,omitempty"`
	DeliveryClientaddressOverrides []AddressOverrideApplyConfiguration          `json:"deliveryClientaddressOverrides,omitempty"`
	Volumes                        []v1.Volume                                  `json:"volumes,omitempty"`
	PeerVolumeMounts               []v1.VolumeMount                             `json:"peerVolumeMounts,omitempty"`
	UpdateCertificateTime          *metav1.Time                                 `json:"updateCertificateTime,omitempty"`
	Affinity                       *v1.Affinity                                 `json:"affinity,omitempty"`
	ServiceMonitor                 *ServiceMonitorApplyConfiguration            `json:"serviceMonitor,omitempty"`
	HostAliases                    []v1.HostAlias                               `json:"hostAliases,omitempty"`
	NodeSelector                   *v1.NodeSelector                             `json:"nodeSelector,omitempty"`
	CouchDBExporter                *FabricPeerCouchdbExporterApplyConfiguration `json:"couchDBexporter,omitempty"`
	GRPCProxy                      *GRPCProxyApplyConfiguration                 `json:"grpcProxy,omitempty"`
	Replicas                       *int                                         `json:"replicas,omitempty"`
	DockerSocketPath               *string                                      `json:"dockerSocketPath,omitempty"`
	Image                          *string                                      `json:"image,omitempty"`
	ExternalBuilders               []ExternalBuilderApplyConfiguration          `json:"externalBuilders,omitempty"`
	GatewayApi                     *FabricGatewayApiApplyConfiguration          `json:"gatewayApi,omitempty"`
	Traefik                        *FabricTraefikApplyConfiguration             `json:"traefik,omitempty"`
	Istio                          *FabricIstioApplyConfiguration               `json:"istio,omitempty"`
	Gossip                         *FabricPeerSpecGossipApplyConfiguration      `json:"gossip,omitempty"`
	ExternalEndpoint               *string                                      `json:"externalEndpoint,omitempty"`
	Tag                            *string                                      `json:"tag,omitempty"`
	ImagePullPolicy                *v1.PullPolicy                               `json:"imagePullPolicy,omitempty"`
	ExternalChaincodeBuilder       *bool                                        `json:"external_chaincode_builder,omitempty"`
	CouchDB                        *FabricPeerCouchDBApplyConfiguration         `json:"couchdb,omitempty"`
	FSServer                       *FabricFSServerApplyConfiguration            `json:"fsServer,omitempty"`
	ImagePullSecrets               []v1.LocalObjectReference                    `json:"imagePullSecrets,omitempty"`
	MspID                          *string                                      `json:"mspID,omitempty"`
	Secret                         *SecretApplyConfiguration                    `json:"secret,omitempty"`
	Service                        *PeerServiceApplyConfiguration               `json:"service,omitempty"`
	StateDb                        *hlfkungfusoftwareesv1alpha1.StateDB         `json:"stateDb,omitempty"`
	Storage                        *FabricPeerStorageApplyConfiguration         `json:"storage,omitempty"`
	Discovery                      *FabricPeerDiscoveryApplyConfiguration       `json:"discovery,omitempty"`
	Logging                        *FabricPeerLoggingApplyConfiguration         `json:"logging,omitempty"`
	Resources                      *FabricPeerResourcesApplyConfiguration       `json:"resources,omitempty"`
	Hosts                          []string                                     `json:"hosts,omitempty"`
	Tolerations                    []v1.Toleration                              `json:"tolerations,omitempty"`
	Env                            []v1.EnvVar                                  `json:"env,omitempty"`
}

// FabricPeerSpecApplyConfiguration constructs a declarative configuration of the FabricPeerSpec type for use with
// apply.
func FabricPeerSpec() *FabricPeerSpecApplyConfiguration {
	return &FabricPeerSpecApplyConfiguration{}
}

// WithPodAnnotations puts the entries into the PodAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PodAnnotations field,
// overwriting an existing map entries in PodAnnotations field with the same key.
func (b *FabricPeerSpecApplyConfiguration) WithPodAnnotations(entries map[string]string) *FabricPeerSpecApplyConfiguration {
	if b.PodAnnotations == nil && len(entries) > 0 {
		b.PodAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PodAnnotations[k] = v
	}
	return b
}

// WithPodLabels puts the entries into the PodLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PodLabels field,
// overwriting an existing map entries in PodLabels field with the same key.
func (b *FabricPeerSpecApplyConfiguration) WithPodLabels(entries map[string]string) *FabricPeerSpecApplyConfiguration {
	if b.PodLabels == nil && len(entries) > 0 {
		b.PodLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PodLabels[k] = v
	}
	return b
}

// WithDeliveryClientaddressOverrides adds the given value to the DeliveryClientaddressOverrides field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DeliveryClientaddressOverrides field.
func (b *FabricPeerSpecApplyConfiguration) WithDeliveryClientaddressOverrides(values ...*AddressOverrideApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDeliveryClientaddressOverrides")
		}
		b.DeliveryClientaddressOverrides = append(b.DeliveryClientaddressOverrides, *values[i])
	}
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *FabricPeerSpecApplyConfiguration) WithVolumes(values ...v1.Volume) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.Volumes = append(b.Volumes, values[i])
	}
	return b
}

// WithPeerVolumeMounts adds the given value to the PeerVolumeMounts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PeerVolumeMounts field.
func (b *FabricPeerSpecApplyConfiguration) WithPeerVolumeMounts(values ...v1.VolumeMount) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.PeerVolumeMounts = append(b.PeerVolumeMounts, values[i])
	}
	return b
}

// WithUpdateCertificateTime sets the UpdateCertificateTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateCertificateTime field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithUpdateCertificateTime(value metav1.Time) *FabricPeerSpecApplyConfiguration {
	b.UpdateCertificateTime = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithAffinity(value v1.Affinity) *FabricPeerSpecApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithServiceMonitor sets the ServiceMonitor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceMonitor field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithServiceMonitor(value *ServiceMonitorApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.ServiceMonitor = value
	return b
}

// WithHostAliases adds the given value to the HostAliases field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostAliases field.
func (b *FabricPeerSpecApplyConfiguration) WithHostAliases(values ...v1.HostAlias) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.HostAliases = append(b.HostAliases, values[i])
	}
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithNodeSelector(value v1.NodeSelector) *FabricPeerSpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// WithCouchDBExporter sets the CouchDBExporter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CouchDBExporter field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithCouchDBExporter(value *FabricPeerCouchdbExporterApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.CouchDBExporter = value
	return b
}

// WithGRPCProxy sets the GRPCProxy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GRPCProxy field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithGRPCProxy(value *GRPCProxyApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.GRPCProxy = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithReplicas(value int) *FabricPeerSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithDockerSocketPath sets the DockerSocketPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DockerSocketPath field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithDockerSocketPath(value string) *FabricPeerSpecApplyConfiguration {
	b.DockerSocketPath = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithImage(value string) *FabricPeerSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithExternalBuilders adds the given value to the ExternalBuilders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalBuilders field.
func (b *FabricPeerSpecApplyConfiguration) WithExternalBuilders(values ...*ExternalBuilderApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalBuilders")
		}
		b.ExternalBuilders = append(b.ExternalBuilders, *values[i])
	}
	return b
}

// WithGatewayApi sets the GatewayApi field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GatewayApi field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithGatewayApi(value *FabricGatewayApiApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.GatewayApi = value
	return b
}

// WithTraefik sets the Traefik field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Traefik field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithTraefik(value *FabricTraefikApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Traefik = value
	return b
}

// WithIstio sets the Istio field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Istio field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithIstio(value *FabricIstioApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Istio = value
	return b
}

// WithGossip sets the Gossip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Gossip field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithGossip(value *FabricPeerSpecGossipApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Gossip = value
	return b
}

// WithExternalEndpoint sets the ExternalEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalEndpoint field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithExternalEndpoint(value string) *FabricPeerSpecApplyConfiguration {
	b.ExternalEndpoint = &value
	return b
}

// WithTag sets the Tag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tag field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithTag(value string) *FabricPeerSpecApplyConfiguration {
	b.Tag = &value
	return b
}

// WithImagePullPolicy sets the ImagePullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullPolicy field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithImagePullPolicy(value v1.PullPolicy) *FabricPeerSpecApplyConfiguration {
	b.ImagePullPolicy = &value
	return b
}

// WithExternalChaincodeBuilder sets the ExternalChaincodeBuilder field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalChaincodeBuilder field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithExternalChaincodeBuilder(value bool) *FabricPeerSpecApplyConfiguration {
	b.ExternalChaincodeBuilder = &value
	return b
}

// WithCouchDB sets the CouchDB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CouchDB field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithCouchDB(value *FabricPeerCouchDBApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.CouchDB = value
	return b
}

// WithFSServer sets the FSServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FSServer field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithFSServer(value *FabricFSServerApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.FSServer = value
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *FabricPeerSpecApplyConfiguration) WithImagePullSecrets(values ...v1.LocalObjectReference) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithMspID sets the MspID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MspID field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithMspID(value string) *FabricPeerSpecApplyConfiguration {
	b.MspID = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithSecret(value *SecretApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Secret = value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithService(value *PeerServiceApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Service = value
	return b
}

// WithStateDb sets the StateDb field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StateDb field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithStateDb(value hlfkungfusoftwareesv1alpha1.StateDB) *FabricPeerSpecApplyConfiguration {
	b.StateDb = &value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithStorage(value *FabricPeerStorageApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Storage = value
	return b
}

// WithDiscovery sets the Discovery field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Discovery field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithDiscovery(value *FabricPeerDiscoveryApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Discovery = value
	return b
}

// WithLogging sets the Logging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logging field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithLogging(value *FabricPeerLoggingApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Logging = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *FabricPeerSpecApplyConfiguration) WithResources(value *FabricPeerResourcesApplyConfiguration) *FabricPeerSpecApplyConfiguration {
	b.Resources = value
	return b
}

// WithHosts adds the given value to the Hosts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Hosts field.
func (b *FabricPeerSpecApplyConfiguration) WithHosts(values ...string) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.Hosts = append(b.Hosts, values[i])
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *FabricPeerSpecApplyConfiguration) WithTolerations(values ...v1.Toleration) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *FabricPeerSpecApplyConfiguration) WithEnv(values ...v1.EnvVar) *FabricPeerSpecApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}
