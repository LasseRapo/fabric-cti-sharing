/*
 * Copyright Kungfusoftware.es. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// FabricTraefikApplyConfiguration represents a declarative configuration of the FabricTraefik type for use
// with apply.
type FabricTraefikApplyConfiguration struct {
	Entrypoints []string                                    `json:"entryPoints,omitempty"`
	Middlewares []FabricTraefikMiddlewareApplyConfiguration `json:"middlewares,omitempty"`
	Hosts       []string                                    `json:"hosts,omitempty"`
}

// FabricTraefikApplyConfiguration constructs a declarative configuration of the FabricTraefik type for use with
// apply.
func FabricTraefik() *FabricTraefikApplyConfiguration {
	return &FabricTraefikApplyConfiguration{}
}

// WithEntrypoints adds the given value to the Entrypoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Entrypoints field.
func (b *FabricTraefikApplyConfiguration) WithEntrypoints(values ...string) *FabricTraefikApplyConfiguration {
	for i := range values {
		b.Entrypoints = append(b.Entrypoints, values[i])
	}
	return b
}

// WithMiddlewares adds the given value to the Middlewares field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Middlewares field.
func (b *FabricTraefikApplyConfiguration) WithMiddlewares(values ...*FabricTraefikMiddlewareApplyConfiguration) *FabricTraefikApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMiddlewares")
		}
		b.Middlewares = append(b.Middlewares, *values[i])
	}
	return b
}

// WithHosts adds the given value to the Hosts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Hosts field.
func (b *FabricTraefikApplyConfiguration) WithHosts(values ...string) *FabricTraefikApplyConfiguration {
	for i := range values {
		b.Hosts = append(b.Hosts, values[i])
	}
	return b
}
